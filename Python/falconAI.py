# -*- coding: UTF-8 -*-
import numpy as np
def forward(x1, x2):
    # return print(numpy.array([1,2]))
    # import os
    # return print(os.getcwd())
    x1 = (x1 - 0.10281097553834526) / 0.5700629644338665
    x2 = (x2 - 2.023219226671707) / 4.7953025287730044

    weight1  = np.array([[ 0.57724205, -0.24300548, -0.13621824,  0.14714494, -0.50034202, -0.18212971,
                           -0.14511583,  0.12850464, -0.73621928,  0.23935793,  0.20812316,  0.77410582,
                           0.28990723,  0.07135517, -0.70215415],
                         [ 0.77570888, -0.44461326,  0.02783881,  0.06761706,  0.68896937,  1.35426595,
                           1.12989758, -0.2434728,  -0.1361402,  -1.2694926,  -1.93019429,  0.00950284,
                           0.96086669, -1.13153779,  0.60631261]])
    bias1 = np.array([-0.3243547,   0.58608699, -0.26067942,  0.10907197,  0.02312535,  0.3940952,
                      0.31632809, -0.3180198,  -0.32744457,  0.2882215,   0.01325927, -0.20896699,
                      0.07891786,  0.73816396,  0.30501192])

    weight2 = np.array(
        [[-2.98521410e-01,  1.18187185e-01, -1.73835610e-01,  5.01787421e-02,
          9.61402751e-01, -5.29270879e-02, -7.04053785e-01,  1.66450294e-01,
          -7.96224459e-55,  5.77228492e-01, -2.55257917e-01,  5.65568773e-02,
          1.12490277e-01, -1.61442409e-01, -7.67796486e-02],
        [ 2.28955673e-01,  3.28565818e-01,  3.35772388e-01,  1.81560628e-01,
           3.56864681e-01,  5.85045276e-02,  3.19527698e-01,  9.45158897e-02,
           -1.05680284e-55,  4.15583669e-01,  6.20437406e-02,  5.85389953e-01,
           -5.09071382e-01, -7.77728751e-03,  2.60406264e-01],
        [ 1.70532851e-01, -1.39054872e-01 , 1.33786138e-01, -4.47836381e-01,
           2.92880056e-01,  7.34669386e-02 ,-2.05396092e-01 , 5.69914405e-65,
           -4.77456745e-40,  3.37197444e-01 , 1.00651562e-01, -2.57724425e-01,
           -7.16988516e-02, -1.86568911e-02, -4.14229664e-01],
        [-2.06298072e-01, -4.00748909e-03, -1.59395558e-01, -5.12227390e-04,
          6.33685633e-02 ,-1.23800689e-01,  1.31118642e-01, -6.23744574e-02,
          -1.48957289e-88,  1.69375945e-01, -2.68486531e-01, -2.24464943e-01,
          6.41298838e-02,  1.46516900e-01, -1.56687595e-01],
        [-8.64298816e-02, -5.29139613e-01, -2.49410836e-02 ,-7.17649203e-01,
          -2.03115858e-01 ,-6.35581190e-02, -2.87597993e-01 , 1.30765599e-01,
          1.87558648e-87,  2.66038599e-01,  1.49603529e-01,  3.48739550e-01,
          1.91156851e-01 ,-1.26176671e-01, -3.03914945e-02],
        [-1.35061726e+00, -8.13606683e-01, -1.09536065e+00, -8.76504674e-01,
          -1.07195643e-01, -8.45608905e-01,  1.59420397e-02, -2.07225975e-01,
          -4.97137138e-68, -4.07873913e-01 , 5.06454320e-01, -1.31471341e-01,
          3.94429033e-01 ,-9.09441184e-01 , 4.42527171e-01],
        [-9.65993140e-01, -3.16724552e-01, -9.71380178e-01, -8.99287499e-01,
          -2.75110671e-01, -1.12025280e+00,  5.57788721e-01, -1.05511490e-01,
          -6.09546631e-38,  1.78161413e-01,  3.65747555e-01,  7.85163632e-02,
          2.66080355e-01, -1.24836129e+00,  2.47891465e-01],
        [-1.08350885e-03, -3.55752438e-40,  3.59716022e-02, -3.99550145e-02,
          5.96549542e-08, -8.45534559e-73,  8.92618044e-02,  3.85808893e-31,
          -2.23763820e-38,  1.94167122e-03,  1.44142702e-02,  1.30881426e-55,
          3.25245090e-29, -4.82606122e-08,  1.06595168e-84],
        [ 4.84819530e-01, -4.99762480e-02,  6.00545680e-01,  8.62808996e-02,
           -3.05288893e-01,  1.67075116e-01,  2.91007600e-01,  5.81690056e-29,
           -1.18329642e-49, -7.45383287e-02,  1.31575572e-02,  2.50514516e-01,
           1.40422066e-02 , 3.99791085e-01, -1.34869152e-01],
        [ 2.80283127e-01 , 3.36016849e-01 , 8.82128131e-02,  5.53857401e-01,
           -4.65988028e-02 , 3.13746111e-01,  1.65391157e-01 ,-1.58347532e-03,
           -8.06869589e-86,  5.53020832e-01, -1.55450736e-01, -2.74746248e-01,
           -3.29672110e-01 , 4.07516256e-01 ,-5.04312372e-01],
        [ 1.09311335e+00 , 4.03331485e-01 , 5.92538506e-01,  3.28937420e-01,
           6.14183203e-03 , 1.54550613e-01 ,-6.24335293e-01 , 1.19037004e-03,
           -2.55356305e-48,  6.00636655e-01, -6.75306684e-01, -1.29144592e+00,
           2.49328013e-01,  9.18390534e-01, -1.14381378e+00],
        [-6.47475682e-02, 1.30610445e-01,  5.59120334e-01,  5.85270892e-01,
          1.02283445e-01,  1.33673479e-01, -1.65259351e-02,  1.09417411e-16,
          -2.62789252e-84,  7.59963745e-01 ,-5.59384346e-01, -6.89406083e-01,
          1.40787871e+00,  2.92009940e-01, -1.46517131e+00],
        [ 3.38308219e-01, -1.63633069e-01, -3.10096416e-01, -7.28637457e-02,
           1.00731385e-01, -2.38934487e-01, -1.40065527e-01,  1.25337266e-01,
           4.03215066e-83 , 5.99429230e-01, -5.79968001e-01 ,-6.87689316e-02,
           6.11502292e-01 ,-1.85603648e-01, -4.23392542e-01],
        [ 5.55823294e-01,  2.34609366e-01,  4.31048140e-01,  2.50717569e-01,
           3.42755309e-01,  1.99462414e-01, -1.11072440e-01, -3.71125607e-02,
           6.11108498e-72 , 3.60874836e-01,  3.02992554e-01,  4.47827890e-01,
           -2.13167955e-01,  1.75174764e-01,  1.83890103e-01],
        [ 1.20764823e-01, -2.98274632e-01, -5.47156833e-01, -4.16160956e-01,
           -5.04919163e-01,  1.01593275e-01, -1.67460261e-01, -4.73579736e-02,
           -1.65036585e-88, -6.84040257e-02,  4.00048509e-01,  4.11544332e-01,
           3.97693134e-01,  1.41495327e-01,  5.42424601e-01]])

    bias2 = np.array([0.00622345, 0.05196006,  0.35847826,  0.39356244,  0.54534253,  0.32271177,
                      0.1516806,  -0.23391435 ,-0.21861514,  0.58035178,  0.01292526, -0.12632148,
                      0.10875958,  0.31257821,  0.43646681])

    weight3 = np.array([[ 9.23101755e-01],
                        [ 7.66551577e-01],
                        [ 5.65748449e-01],
                        [ 6.27324195e-01],
                        [ 5.63190315e-01],
                        [ 9.41172411e-01],
                        [-3.95090177e-01],
                        [-6.57317157e-02],
                        [ 1.10964474e-87],
                        [ 2.72788069e-01],
                        [-7.68848989e-01],
                        [-8.05859256e-01],
                        [ 5.16175377e-01],
                        [ 1.19830864e+00],
                        [-7.92849358e-01]])
    bias3 = np.array([0.08565462])

    x = weight1[0] * x1 + weight1[1] * x2 +  bias1
    x = np.maximum(0, x)
    x = np.dot(x, weight2) + bias2
    x = np.maximum(0, x)
    x = np.dot(x, weight3) + bias3
    x = np.sum(x)
    result = 1 / (1 + np.exp(-x))

    if result > 0.5:
        return 1
    else:
        return 0
#
if __name__ == '__main__':
    print(forward(-0.567665, 41.99832))
